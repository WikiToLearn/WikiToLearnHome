Detailed script overview
========================

The developer of the WikiToLearn is supposed to only run the scripts contained
in `./WikiToLearnHome` folder, according to the given instructions, since these
bundle all the basic operations that one would do to the WTL local instance.

These scripts

For a detailed variable overview read the relative section.

### Production and Environment

WTL can be run with different purposes.

First of all it can either be run in
*production* mode, for example as in the main production website or as in
the various staging websites, or in *non-production* mode, which can be local
development, or testing new servers and services.

Secondly, WTL environtment can be *basic* , i.e. it runs on a single node (or
host), or it can be spread into multiple georeplicated nodes ( *multiple nodes*
environtment).
We are currently working on georeplication, so this feature is not ready yet.

### Layers

The scripts are organized in *layers*. The first layer is the *interacion* layer
and is constituted by the scripts that the end user should use to interact with
its WTL repo.

The second layer is the *atomic* layer, and is contituted by single operations
that the user could perform on its WTL repo. These guarantee a finer control
over the WTL repo. Interaction layer scripts are composed by cobinations of
atomic layer sripts.

The third layer is the *helper* layer, and is constituted by scripts that
are environment-dependent.

#### Interaction Layer

#### Atomic Layer

#### Helper Layer

##### Basic Environment

##### Multiple nodes environtment

> Waiting for Luca to Implement this

Global Variables List
---------------------

* WTL_PRODUCTION

* WTL_CONFIG_FILE








Draft Section
=============

Generic To Do List
------------------

### Renaming Dockers

docker  names
    wtl-dev-*
    wtl-commit_hash-*

### Create List of Available env

Create a list of possible env

### wtl-* scripts

#### wtl-create.sh

Wtl-create.sh (vedere run.sh)
Andrebbero fatti gli env, non questi script

Status: *BUONA FORTUNA*

#### wtl-start

Wtl-start.sh (vedere run.sh)

Status: *BUONA FORTUNA*

#### wtl-restorebackup

wtl-restoreback (vedere restore.sh)

#### wtl-do-backup

wtl-do-backup

Formato backup
<nomedb>.struct.sql -> sttruttura db
<nomedb>.data.sql -> dati db
images/
Importare/esportare immagini Docker

#### Wtl-update-db

Wtl-update-db.sh
langforeach+update.php (init-docker.sh)

Status: *NEED TEST*

#### Wtl-use-instance

Wtl-use-instance.sh
attiva haproxy (use-instance.sh)

Status: *NEED TEST*

### New Scripts

#### Wtl-manage-extensions.sh

cosa dovrebbe fare di preciso?

#### staging-rollout

**NOTE:** Descrivere Meglio cosa dovrebbe fare

Script per
Staging/Rollout (su db di chiavi gpg)
O Backup+importa ultimo backup
O Backup+restore

##### Staging

Voglio che se non riesce a scaricare qualcosa, continua a riprovarci finch√®
non ci riesce

### Document Done Scripts

#### wtl-download

Wtl-download wtl-download.sh +
(Scarica immagini docker) pull-images.sh +
(Scarica repo WTL) download-code.sh

Status: *DONE*

#### Wtl-symlink

Wtl-symlink (vedere init-docker.sh) (da testare bene)

Status: *DONE*

#### Wtl-update-home

Wtl-update-home (gitpull automatico)

Status: *DONE*

#### Wtl-stop

Wtl-stop (docker stop di tutti) delle istanze docker wtl-dev-...
(non ci sono omologhi)

Status: *DONE*

#### Wtl-stop

Wtl-delete.sh
(elimina i docker e i volumi) (destroy)
(evitare di eliminare il docker e tenere i volumi, da problemi con le
    credenziali di mysql)

Status: *DONE*

#### composer-for-dirs

composer-for-dirs: elencare le cartelle dove fare composer nella config
(e documentare questa cosa) +

Status: *DONE*

#### wtl-PANICOOOO

    docker stop $(docker ps -a -q)
    docker rm $(docker ps -a -q)
    docker rmi $(docker images -q)
    docker volume rm $(docker volume ls -q)

Status: *DONE*








### const.sh

cd in current directory
Defines environment variables

### create-config.sh

Create user config "$WTL\_CONFIG\_FILE"

Instance, url, github token (composer), plugins for
customization  ($WTL\_USE\_DEFAULT)

### download-code.sh

pull, submodule init

warning: discard changes!

### active-instance

the old use instance: let's start everything

calls load-libs

we create a new instance (eg when shipping new versions= zero downtime)

### load-libs

?????

### run-all

upstart
