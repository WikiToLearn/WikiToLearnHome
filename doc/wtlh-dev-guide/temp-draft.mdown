Interaction level
-----------------


#### instance.sh

##### Synopsis

```{.bash}
./instance.sh


```

Atomic level
------------

#### backup-auto-delete.sh
#### backup-do.sh
#### backup-restore.sh
#### composer-dir.sh
#### composer-for-dirs.sh
#### copy-last-backup-to-devdump.sh
#### create-running.sh
#### create.sh
#### delete-volumes.sh
#### delete.sh
#### docker-images-clean.sh
#### docker-images-delete-old-images.sh
#### docker-images-export.sh
#### docker-images-import.sh
#### download-all.sh
#### download-code.sh
#### download-mediawiki-extensions.sh
#### fix-hosts.sh
#### lang-foreach-php-maintenance.sh
#### list-instances.sh
#### make-readonly.sh
#### make-readwrite.sh
#### make-self-signed-certs.sh
#### panic-attack.sh
#### pull-images.sh
#### relase-procedure.sh
#### start.sh
#### stop.sh
#### unuse-instance.sh
#### unused-instance-stop-delete.sh
#### update-db.sh
#### update-home.sh
#### use-instance.sh
#### wtl-log

### Helper level

Here is presented just a quick overview of the purposes of each helper
script.

#### backup-do

#### backup-restore

#### create

#### make-readonly

#### make-readwrite

#### start


Environtments
-------------

Here is analysed the implementation of the helper scripts for each
environment.

### Basic Environment

### Basic - OCG development

### Multiple nodes environtment


































Draft Section
=============

Generic To Do List
------------------

### Renaming Dockers

docker  names
    wtl-dev-*
    wtl-commit_hash-*

### Create List of Available env

Create a list of possible env

### wtl-* scripts

#### wtl-create.sh

Wtl-create.sh (vedere run.sh)
Andrebbero fatti gli env, non questi script

Status: *BUONA FORTUNA*

#### wtl-start

Wtl-start.sh (vedere run.sh)

Status: *BUONA FORTUNA*

#### wtl-restorebackup

wtl-restoreback (vedere restore.sh)

#### wtl-do-backup

wtl-do-backup

Formato backup
<nomedb>.struct.sql -> sttruttura db
<nomedb>.data.sql -> dati db
images/
Importare/esportare immagini Docker

#### Wtl-update-db

Wtl-update-db.sh
langforeach+update.php (init-docker.sh)

Status: *NEED TEST*

#### Wtl-use-instance

Wtl-use-instance.sh
attiva haproxy (use-instance.sh)

Status: *NEED TEST*

### New Scripts

#### Wtl-manage-extensions.sh

cosa dovrebbe fare di preciso?

#### staging-rollout

**NOTE:** Descrivere Meglio cosa dovrebbe fare

Script per
Staging/Rollout (su db di chiavi gpg)
O Backup+importa ultimo backup
O Backup+restore

##### Staging

Voglio che se non riesce a scaricare qualcosa, continua a riprovarci finch√®
non ci riesce

### Document Done Scripts

#### wtl-download

Wtl-download wtl-download.sh +
(Scarica immagini docker) pull-images.sh +
(Scarica repo WTL) download-code.sh

Status: *DONE*

#### Wtl-symlink

Wtl-symlink (vedere init-docker.sh) (da testare bene)

Status: *DONE*

#### Wtl-update-home

Wtl-update-home (gitpull automatico)

Status: *DONE*

#### Wtl-stop

Wtl-stop (docker stop di tutti) delle istanze docker wtl-dev-...
(non ci sono omologhi)

Status: *DONE*

#### Wtl-stop

Wtl-delete.sh
(elimina i docker e i volumi) (destroy)
(evitare di eliminare il docker e tenere i volumi, da problemi con le
    credenziali di mysql)

Status: *DONE*

#### composer-for-dirs

composer-for-dirs: elencare le cartelle dove fare composer nella config
(e documentare questa cosa) +

Status: *DONE*

#### wtl-PANICOOOO

    docker stop $(docker ps -a -q)
    docker rm $(docker ps -a -q)
    docker rmi $(docker images -q)
    docker volume rm $(docker volume ls -q)

Status: *DONE*








### const.sh

cd in current directory
Defines environment variables

### create-config.sh

Create user config "$WTL\_CONFIG\_FILE"

Instance, url, github token (composer), plugins for
customization  ($WTL\_USE\_DEFAULT)

### download-code.sh

pull, submodule init

warning: discard changes!

### active-instance

the old use instance: let's start everything

calls load-libs

we create a new instance (eg when shipping new versions= zero downtime)

### load-libs

?????

### run-all

upstart
