 WikiToLearn Home
==================

The purpose of this repository, which will be referred to as WikiToLearnHome
(shortened as WTLH), is setting up an instance of WikiToLearn (shortened as
WTL), that can either be a development one (run locally on a laptop, with test
content) and a staging-production one.
Specific characteristics of the different instances of WikiToLearn will be
explained in the following sections

All the operations can be performed "manually" (without the help of these
scripts), but the whole process is quite tedious and it is extremely easy to
make some errors, thus we highly recommend to use WTLH to setup your
environment.

Basic environment setup: local WTL
----------------------------------

This section will descrbe how to setup a non-production basic local WTL
environment.

Detailed script overview
------------------------

The developer of the WikiToLearn is supposed to only run the
wtl*.sh scripts contained in this folder, and follow the instructions.

For a detailed variable overview read the relative section.

### Production and Environment

WTL can be run with different purposes.

First of all it can either be run in
*production* mode, for example as in the main production website or as in
the various staging websites, or in *non-production* mode, which can be local
development, or testing new servers and services.

Secondly, WTL environtment can be *basic* , i.e. it runs on a single node (or
host), or it can be spread into multiple georeplicated nodes ( *multiple nodes*
environtment).
We are currently working on georeplication, so this feature is not ready yet.

### Layers

The scripts are organized in *layers*. The first layer is the *interacion* layer
and is constituted by the scripts that the end user should use to interact with
its WTL repo.

The second layer is the *atomic* layer, and is contituted by single operations
that the user could perform on its WTL repo. These guarantee a finer control
over the WTL repo. Interaction layer scripts are composed by cobinations of
atomic layer sripts.

The third layer is the *helper* layer, and is constituted by scripts that
are environment-dependent.

#### Interaction Layer

#### Atomic Layer

#### Helper Layer

##### Basic Environment

##### Multiple nodes environtment

> Waiting for Luca to Implement this

Global Variables List
---------------------

* WTL_PRODUCTION

* WTL_CONFIG_FILE

Conventions
-----------

### Global Environment Variables

Environment Variables that are used by more than one script must begin with

    WTL-*

### Calling other scripts

In this repo there are many script that call other scripts. This action can be
performed in multiple ways, here it is preferred to use

    . /script.sh

In this way, if script.sh crashes or exit with error, also the script that
called it exits with error

### Style Conventions

#### Line Length

All the lines should be shorter then 80 characters.

#### Indentation

Indentation is performed through 4 spaces. Hence we use soft tab, not hard tab.

If you are using vim, you can achieve this adding

    set expandtab
    set shiftwidth=2
    set softtabstop=2

to ~/.vimrc

## References

### bash

The script are all written in bash. A good source of information about bash can
be found [here][1]

### Docker Containers

WikiToLearn Infrastructure uses extensively docker containers. If you do not
know what they are, we suggest that you read the [official documentation][2]

### Documentation

The documentation is written in Markdown. If you have no clue on what it is,
we suggest that you read the [Markdown creator's page][3]

[1]: http://tldp.org/guides.html "The Linux documentaion Project"
[2]: https://docs.docker.com/ "Docker Documentation"
[3]: https://daringfireball.net/projects/markdown/ "Markdown Creator's Page"


Draft Section
-------------

### const.sh

cd in current directory
Defines environment variables

### create-config.sh

Create user config "$WTL\_CONFIG\_FILE"

Instance, url, github token (composer), plugins for
customization  ($WTL\_USE\_DEFAULT)

### download-code.sh

pull, submodule init

warning: discard changes!

### active-instance

the old use instance: let's start everything

calls load-wikitolearn

we create a new instance (eg when shipping new versions= zero downtime)

### load-wikitolearn

?????

### run-all

upstart
